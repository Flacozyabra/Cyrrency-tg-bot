import asyncio
from datetime import datetime
from time import sleep

import yaml
import logging.config

from marshmallow.utils import timestamp

from config import load_config
from utils import send_and_update_message, get_rates


# –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config = load_config('.env')


# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —á–µ—Ä–µ–∑ yaml —Ñ–∞–π–ª
    with open('logs/logging_config.yaml', 'rt') as f:
        logconfig = yaml.safe_load(f.read())

    logging.config.dictConfig(logconfig)

    # —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger(__name__)
    logger.info('–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞')

    # # —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    # logger.debug('–õ–æ–≥ DEBUG')
    # logger.info('–õ–æ–≥ INFO')
    # logger.warning('–õ–æ–≥ WARNING')
    # logger.error('–õ–æ–≥ ERROR')
    # logger.critical('–õ–æ–≥ CRITICAL')
    # # –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–µ—Ä–∞
    # print(f"Root logger level: {logging.getLogger().getEffectiveLevel()}")
    # print(f"Main logger level: {logger.getEffectiveLevel()}")

    while True:
        usdt = get_rates()

        if usdt is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å")

        else:

            tm = datetime.now().strftime("%H:%M - %d.%m.%y")
            tm = str(tm)

            msg = 'üíµ$USDT = ‚ÇΩ' + usdt + ' –Ω–∞ ' + '[' + tm + ']'
            send_and_update_message(token=config.tg_bot.token,
                                    chat_id=config.tg_bot.chat_id,
                                    topic_id=config.tg_bot.topic_id,
                                    msg=msg)
            sleep_time = 300
            logger.info(f'–ü–æ–ª–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π. –°–ø–∏–º {300} —Å–µ–∫—É–Ω–¥.')
            sleep(sleep_time)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
